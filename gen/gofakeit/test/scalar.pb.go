// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: gofakeit/test/scalar.proto

package test

import (
	_ "github.com/rodaine/protogofakeit/gen/gofakeit"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Enum int32

const (
	Enum_ENUM_UNSPECIFIED Enum = 0
	Enum_ENUM_ALPHA       Enum = 1
	Enum_ENUM_BETA        Enum = 2
	Enum_ENUM_GAMMA       Enum = 3
)

// Enum value maps for Enum.
var (
	Enum_name = map[int32]string{
		0: "ENUM_UNSPECIFIED",
		1: "ENUM_ALPHA",
		2: "ENUM_BETA",
		3: "ENUM_GAMMA",
	}
	Enum_value = map[string]int32{
		"ENUM_UNSPECIFIED": 0,
		"ENUM_ALPHA":       1,
		"ENUM_BETA":        2,
		"ENUM_GAMMA":       3,
	}
)

func (x Enum) Enum() *Enum {
	p := new(Enum)
	*p = x
	return p
}

func (x Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_gofakeit_test_scalar_proto_enumTypes[0].Descriptor()
}

func (Enum) Type() protoreflect.EnumType {
	return &file_gofakeit_test_scalar_proto_enumTypes[0]
}

func (x Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Enum.Descriptor instead.
func (Enum) EnumDescriptor() ([]byte, []int) {
	return file_gofakeit_test_scalar_proto_rawDescGZIP(), []int{0}
}

type ScalarDefaults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bool     bool    `protobuf:"varint,1,opt,name=bool,proto3" json:"bool,omitempty"`
	Enum     Enum    `protobuf:"varint,2,opt,name=enum,proto3,enum=gofakeit.test.Enum" json:"enum,omitempty"`
	Int32    int32   `protobuf:"varint,3,opt,name=int32,proto3" json:"int32,omitempty"`
	Sint32   int32   `protobuf:"zigzag32,4,opt,name=sint32,proto3" json:"sint32,omitempty"`
	Sfixed32 int32   `protobuf:"fixed32,5,opt,name=sfixed32,proto3" json:"sfixed32,omitempty"`
	Uint32   uint32  `protobuf:"varint,6,opt,name=uint32,proto3" json:"uint32,omitempty"`
	Fixed32  uint32  `protobuf:"fixed32,7,opt,name=fixed32,proto3" json:"fixed32,omitempty"`
	Int64    int64   `protobuf:"varint,8,opt,name=int64,proto3" json:"int64,omitempty"`
	Sint64   int64   `protobuf:"zigzag64,9,opt,name=sint64,proto3" json:"sint64,omitempty"`
	Sfixed64 int64   `protobuf:"fixed64,10,opt,name=sfixed64,proto3" json:"sfixed64,omitempty"`
	Uint64   uint64  `protobuf:"varint,11,opt,name=uint64,proto3" json:"uint64,omitempty"`
	Fixed64  uint64  `protobuf:"fixed64,12,opt,name=fixed64,proto3" json:"fixed64,omitempty"`
	Float    float32 `protobuf:"fixed32,13,opt,name=float,proto3" json:"float,omitempty"`
	Double   float64 `protobuf:"fixed64,14,opt,name=double,proto3" json:"double,omitempty"`
	String_  string  `protobuf:"bytes,15,opt,name=string,proto3" json:"string,omitempty"`
	Bytes    []byte  `protobuf:"bytes,16,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *ScalarDefaults) Reset() {
	*x = ScalarDefaults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gofakeit_test_scalar_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarDefaults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarDefaults) ProtoMessage() {}

func (x *ScalarDefaults) ProtoReflect() protoreflect.Message {
	mi := &file_gofakeit_test_scalar_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarDefaults.ProtoReflect.Descriptor instead.
func (*ScalarDefaults) Descriptor() ([]byte, []int) {
	return file_gofakeit_test_scalar_proto_rawDescGZIP(), []int{0}
}

func (x *ScalarDefaults) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *ScalarDefaults) GetEnum() Enum {
	if x != nil {
		return x.Enum
	}
	return Enum_ENUM_UNSPECIFIED
}

func (x *ScalarDefaults) GetInt32() int32 {
	if x != nil {
		return x.Int32
	}
	return 0
}

func (x *ScalarDefaults) GetSint32() int32 {
	if x != nil {
		return x.Sint32
	}
	return 0
}

func (x *ScalarDefaults) GetSfixed32() int32 {
	if x != nil {
		return x.Sfixed32
	}
	return 0
}

func (x *ScalarDefaults) GetUint32() uint32 {
	if x != nil {
		return x.Uint32
	}
	return 0
}

func (x *ScalarDefaults) GetFixed32() uint32 {
	if x != nil {
		return x.Fixed32
	}
	return 0
}

func (x *ScalarDefaults) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *ScalarDefaults) GetSint64() int64 {
	if x != nil {
		return x.Sint64
	}
	return 0
}

func (x *ScalarDefaults) GetSfixed64() int64 {
	if x != nil {
		return x.Sfixed64
	}
	return 0
}

func (x *ScalarDefaults) GetUint64() uint64 {
	if x != nil {
		return x.Uint64
	}
	return 0
}

func (x *ScalarDefaults) GetFixed64() uint64 {
	if x != nil {
		return x.Fixed64
	}
	return 0
}

func (x *ScalarDefaults) GetFloat() float32 {
	if x != nil {
		return x.Float
	}
	return 0
}

func (x *ScalarDefaults) GetDouble() float64 {
	if x != nil {
		return x.Double
	}
	return 0
}

func (x *ScalarDefaults) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *ScalarDefaults) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type ScalarStaticTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bool     bool    `protobuf:"varint,1,opt,name=bool,proto3" json:"bool,omitempty"`
	Enum     Enum    `protobuf:"varint,2,opt,name=enum,proto3,enum=gofakeit.test.Enum" json:"enum,omitempty"`
	Int32    int32   `protobuf:"varint,3,opt,name=int32,proto3" json:"int32,omitempty"`
	Sint32   int32   `protobuf:"zigzag32,4,opt,name=sint32,proto3" json:"sint32,omitempty"`
	Sfixed32 int32   `protobuf:"fixed32,5,opt,name=sfixed32,proto3" json:"sfixed32,omitempty"`
	Uint32   uint32  `protobuf:"varint,6,opt,name=uint32,proto3" json:"uint32,omitempty"`
	Fixed32  uint32  `protobuf:"fixed32,7,opt,name=fixed32,proto3" json:"fixed32,omitempty"`
	Int64    int64   `protobuf:"varint,8,opt,name=int64,proto3" json:"int64,omitempty"`
	Sint64   int64   `protobuf:"zigzag64,9,opt,name=sint64,proto3" json:"sint64,omitempty"`
	Sfixed64 int64   `protobuf:"fixed64,10,opt,name=sfixed64,proto3" json:"sfixed64,omitempty"`
	Uint64   uint64  `protobuf:"varint,11,opt,name=uint64,proto3" json:"uint64,omitempty"`
	Fixed64  uint64  `protobuf:"fixed64,12,opt,name=fixed64,proto3" json:"fixed64,omitempty"`
	Float    float32 `protobuf:"fixed32,13,opt,name=float,proto3" json:"float,omitempty"`
	Double   float64 `protobuf:"fixed64,14,opt,name=double,proto3" json:"double,omitempty"`
	String_  string  `protobuf:"bytes,15,opt,name=string,proto3" json:"string,omitempty"`
	Bytes    []byte  `protobuf:"bytes,16,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *ScalarStaticTags) Reset() {
	*x = ScalarStaticTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gofakeit_test_scalar_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarStaticTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarStaticTags) ProtoMessage() {}

func (x *ScalarStaticTags) ProtoReflect() protoreflect.Message {
	mi := &file_gofakeit_test_scalar_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarStaticTags.ProtoReflect.Descriptor instead.
func (*ScalarStaticTags) Descriptor() ([]byte, []int) {
	return file_gofakeit_test_scalar_proto_rawDescGZIP(), []int{1}
}

func (x *ScalarStaticTags) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *ScalarStaticTags) GetEnum() Enum {
	if x != nil {
		return x.Enum
	}
	return Enum_ENUM_UNSPECIFIED
}

func (x *ScalarStaticTags) GetInt32() int32 {
	if x != nil {
		return x.Int32
	}
	return 0
}

func (x *ScalarStaticTags) GetSint32() int32 {
	if x != nil {
		return x.Sint32
	}
	return 0
}

func (x *ScalarStaticTags) GetSfixed32() int32 {
	if x != nil {
		return x.Sfixed32
	}
	return 0
}

func (x *ScalarStaticTags) GetUint32() uint32 {
	if x != nil {
		return x.Uint32
	}
	return 0
}

func (x *ScalarStaticTags) GetFixed32() uint32 {
	if x != nil {
		return x.Fixed32
	}
	return 0
}

func (x *ScalarStaticTags) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *ScalarStaticTags) GetSint64() int64 {
	if x != nil {
		return x.Sint64
	}
	return 0
}

func (x *ScalarStaticTags) GetSfixed64() int64 {
	if x != nil {
		return x.Sfixed64
	}
	return 0
}

func (x *ScalarStaticTags) GetUint64() uint64 {
	if x != nil {
		return x.Uint64
	}
	return 0
}

func (x *ScalarStaticTags) GetFixed64() uint64 {
	if x != nil {
		return x.Fixed64
	}
	return 0
}

func (x *ScalarStaticTags) GetFloat() float32 {
	if x != nil {
		return x.Float
	}
	return 0
}

func (x *ScalarStaticTags) GetDouble() float64 {
	if x != nil {
		return x.Double
	}
	return 0
}

func (x *ScalarStaticTags) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *ScalarStaticTags) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type ScalarTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bool     bool    `protobuf:"varint,1,opt,name=bool,proto3" json:"bool,omitempty"`
	Enum     Enum    `protobuf:"varint,2,opt,name=enum,proto3,enum=gofakeit.test.Enum" json:"enum,omitempty"`
	Int32    int32   `protobuf:"varint,3,opt,name=int32,proto3" json:"int32,omitempty"`
	Sint32   int32   `protobuf:"zigzag32,4,opt,name=sint32,proto3" json:"sint32,omitempty"`
	Sfixed32 int32   `protobuf:"fixed32,5,opt,name=sfixed32,proto3" json:"sfixed32,omitempty"`
	Uint32   uint32  `protobuf:"varint,6,opt,name=uint32,proto3" json:"uint32,omitempty"`
	Fixed32  uint32  `protobuf:"fixed32,7,opt,name=fixed32,proto3" json:"fixed32,omitempty"`
	Int64    int64   `protobuf:"varint,8,opt,name=int64,proto3" json:"int64,omitempty"`
	Sint64   int64   `protobuf:"zigzag64,9,opt,name=sint64,proto3" json:"sint64,omitempty"`
	Sfixed64 int64   `protobuf:"fixed64,10,opt,name=sfixed64,proto3" json:"sfixed64,omitempty"`
	Uint64   uint64  `protobuf:"varint,11,opt,name=uint64,proto3" json:"uint64,omitempty"`
	Fixed64  uint64  `protobuf:"fixed64,12,opt,name=fixed64,proto3" json:"fixed64,omitempty"`
	Float    float32 `protobuf:"fixed32,13,opt,name=float,proto3" json:"float,omitempty"`
	Double   float64 `protobuf:"fixed64,14,opt,name=double,proto3" json:"double,omitempty"`
	String_  string  `protobuf:"bytes,15,opt,name=string,proto3" json:"string,omitempty"`
	Bytes    []byte  `protobuf:"bytes,16,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *ScalarTags) Reset() {
	*x = ScalarTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gofakeit_test_scalar_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarTags) ProtoMessage() {}

func (x *ScalarTags) ProtoReflect() protoreflect.Message {
	mi := &file_gofakeit_test_scalar_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarTags.ProtoReflect.Descriptor instead.
func (*ScalarTags) Descriptor() ([]byte, []int) {
	return file_gofakeit_test_scalar_proto_rawDescGZIP(), []int{2}
}

func (x *ScalarTags) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *ScalarTags) GetEnum() Enum {
	if x != nil {
		return x.Enum
	}
	return Enum_ENUM_UNSPECIFIED
}

func (x *ScalarTags) GetInt32() int32 {
	if x != nil {
		return x.Int32
	}
	return 0
}

func (x *ScalarTags) GetSint32() int32 {
	if x != nil {
		return x.Sint32
	}
	return 0
}

func (x *ScalarTags) GetSfixed32() int32 {
	if x != nil {
		return x.Sfixed32
	}
	return 0
}

func (x *ScalarTags) GetUint32() uint32 {
	if x != nil {
		return x.Uint32
	}
	return 0
}

func (x *ScalarTags) GetFixed32() uint32 {
	if x != nil {
		return x.Fixed32
	}
	return 0
}

func (x *ScalarTags) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *ScalarTags) GetSint64() int64 {
	if x != nil {
		return x.Sint64
	}
	return 0
}

func (x *ScalarTags) GetSfixed64() int64 {
	if x != nil {
		return x.Sfixed64
	}
	return 0
}

func (x *ScalarTags) GetUint64() uint64 {
	if x != nil {
		return x.Uint64
	}
	return 0
}

func (x *ScalarTags) GetFixed64() uint64 {
	if x != nil {
		return x.Fixed64
	}
	return 0
}

func (x *ScalarTags) GetFloat() float32 {
	if x != nil {
		return x.Float
	}
	return 0
}

func (x *ScalarTags) GetDouble() float64 {
	if x != nil {
		return x.Double
	}
	return 0
}

func (x *ScalarTags) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *ScalarTags) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type ScalarStaticTemplates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bool     bool    `protobuf:"varint,1,opt,name=bool,proto3" json:"bool,omitempty"`
	Enum     Enum    `protobuf:"varint,2,opt,name=enum,proto3,enum=gofakeit.test.Enum" json:"enum,omitempty"`
	Int32    int32   `protobuf:"varint,3,opt,name=int32,proto3" json:"int32,omitempty"`
	Sint32   int32   `protobuf:"zigzag32,4,opt,name=sint32,proto3" json:"sint32,omitempty"`
	Sfixed32 int32   `protobuf:"fixed32,5,opt,name=sfixed32,proto3" json:"sfixed32,omitempty"`
	Uint32   uint32  `protobuf:"varint,6,opt,name=uint32,proto3" json:"uint32,omitempty"`
	Fixed32  uint32  `protobuf:"fixed32,7,opt,name=fixed32,proto3" json:"fixed32,omitempty"`
	Int64    int64   `protobuf:"varint,8,opt,name=int64,proto3" json:"int64,omitempty"`
	Sint64   int64   `protobuf:"zigzag64,9,opt,name=sint64,proto3" json:"sint64,omitempty"`
	Sfixed64 int64   `protobuf:"fixed64,10,opt,name=sfixed64,proto3" json:"sfixed64,omitempty"`
	Uint64   uint64  `protobuf:"varint,11,opt,name=uint64,proto3" json:"uint64,omitempty"`
	Fixed64  uint64  `protobuf:"fixed64,12,opt,name=fixed64,proto3" json:"fixed64,omitempty"`
	Float    float32 `protobuf:"fixed32,13,opt,name=float,proto3" json:"float,omitempty"`
	Double   float64 `protobuf:"fixed64,14,opt,name=double,proto3" json:"double,omitempty"`
	String_  string  `protobuf:"bytes,15,opt,name=string,proto3" json:"string,omitempty"`
	Bytes    []byte  `protobuf:"bytes,16,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *ScalarStaticTemplates) Reset() {
	*x = ScalarStaticTemplates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gofakeit_test_scalar_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarStaticTemplates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarStaticTemplates) ProtoMessage() {}

func (x *ScalarStaticTemplates) ProtoReflect() protoreflect.Message {
	mi := &file_gofakeit_test_scalar_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarStaticTemplates.ProtoReflect.Descriptor instead.
func (*ScalarStaticTemplates) Descriptor() ([]byte, []int) {
	return file_gofakeit_test_scalar_proto_rawDescGZIP(), []int{3}
}

func (x *ScalarStaticTemplates) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *ScalarStaticTemplates) GetEnum() Enum {
	if x != nil {
		return x.Enum
	}
	return Enum_ENUM_UNSPECIFIED
}

func (x *ScalarStaticTemplates) GetInt32() int32 {
	if x != nil {
		return x.Int32
	}
	return 0
}

func (x *ScalarStaticTemplates) GetSint32() int32 {
	if x != nil {
		return x.Sint32
	}
	return 0
}

func (x *ScalarStaticTemplates) GetSfixed32() int32 {
	if x != nil {
		return x.Sfixed32
	}
	return 0
}

func (x *ScalarStaticTemplates) GetUint32() uint32 {
	if x != nil {
		return x.Uint32
	}
	return 0
}

func (x *ScalarStaticTemplates) GetFixed32() uint32 {
	if x != nil {
		return x.Fixed32
	}
	return 0
}

func (x *ScalarStaticTemplates) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *ScalarStaticTemplates) GetSint64() int64 {
	if x != nil {
		return x.Sint64
	}
	return 0
}

func (x *ScalarStaticTemplates) GetSfixed64() int64 {
	if x != nil {
		return x.Sfixed64
	}
	return 0
}

func (x *ScalarStaticTemplates) GetUint64() uint64 {
	if x != nil {
		return x.Uint64
	}
	return 0
}

func (x *ScalarStaticTemplates) GetFixed64() uint64 {
	if x != nil {
		return x.Fixed64
	}
	return 0
}

func (x *ScalarStaticTemplates) GetFloat() float32 {
	if x != nil {
		return x.Float
	}
	return 0
}

func (x *ScalarStaticTemplates) GetDouble() float64 {
	if x != nil {
		return x.Double
	}
	return 0
}

func (x *ScalarStaticTemplates) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *ScalarStaticTemplates) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type ScalarSkip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bool     bool    `protobuf:"varint,1,opt,name=bool,proto3" json:"bool,omitempty"`
	Enum     Enum    `protobuf:"varint,2,opt,name=enum,proto3,enum=gofakeit.test.Enum" json:"enum,omitempty"`
	Int32    int32   `protobuf:"varint,3,opt,name=int32,proto3" json:"int32,omitempty"`
	Sint32   int32   `protobuf:"zigzag32,4,opt,name=sint32,proto3" json:"sint32,omitempty"`
	Sfixed32 int32   `protobuf:"fixed32,5,opt,name=sfixed32,proto3" json:"sfixed32,omitempty"`
	Uint32   uint32  `protobuf:"varint,6,opt,name=uint32,proto3" json:"uint32,omitempty"`
	Fixed32  uint32  `protobuf:"fixed32,7,opt,name=fixed32,proto3" json:"fixed32,omitempty"`
	Int64    int64   `protobuf:"varint,8,opt,name=int64,proto3" json:"int64,omitempty"`
	Sint64   int64   `protobuf:"zigzag64,9,opt,name=sint64,proto3" json:"sint64,omitempty"`
	Sfixed64 int64   `protobuf:"fixed64,10,opt,name=sfixed64,proto3" json:"sfixed64,omitempty"`
	Uint64   uint64  `protobuf:"varint,11,opt,name=uint64,proto3" json:"uint64,omitempty"`
	Fixed64  uint64  `protobuf:"fixed64,12,opt,name=fixed64,proto3" json:"fixed64,omitempty"`
	Float    float32 `protobuf:"fixed32,13,opt,name=float,proto3" json:"float,omitempty"`
	Double   float64 `protobuf:"fixed64,14,opt,name=double,proto3" json:"double,omitempty"`
	String_  string  `protobuf:"bytes,15,opt,name=string,proto3" json:"string,omitempty"`
	Bytes    []byte  `protobuf:"bytes,16,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *ScalarSkip) Reset() {
	*x = ScalarSkip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gofakeit_test_scalar_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarSkip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarSkip) ProtoMessage() {}

func (x *ScalarSkip) ProtoReflect() protoreflect.Message {
	mi := &file_gofakeit_test_scalar_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarSkip.ProtoReflect.Descriptor instead.
func (*ScalarSkip) Descriptor() ([]byte, []int) {
	return file_gofakeit_test_scalar_proto_rawDescGZIP(), []int{4}
}

func (x *ScalarSkip) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *ScalarSkip) GetEnum() Enum {
	if x != nil {
		return x.Enum
	}
	return Enum_ENUM_UNSPECIFIED
}

func (x *ScalarSkip) GetInt32() int32 {
	if x != nil {
		return x.Int32
	}
	return 0
}

func (x *ScalarSkip) GetSint32() int32 {
	if x != nil {
		return x.Sint32
	}
	return 0
}

func (x *ScalarSkip) GetSfixed32() int32 {
	if x != nil {
		return x.Sfixed32
	}
	return 0
}

func (x *ScalarSkip) GetUint32() uint32 {
	if x != nil {
		return x.Uint32
	}
	return 0
}

func (x *ScalarSkip) GetFixed32() uint32 {
	if x != nil {
		return x.Fixed32
	}
	return 0
}

func (x *ScalarSkip) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *ScalarSkip) GetSint64() int64 {
	if x != nil {
		return x.Sint64
	}
	return 0
}

func (x *ScalarSkip) GetSfixed64() int64 {
	if x != nil {
		return x.Sfixed64
	}
	return 0
}

func (x *ScalarSkip) GetUint64() uint64 {
	if x != nil {
		return x.Uint64
	}
	return 0
}

func (x *ScalarSkip) GetFixed64() uint64 {
	if x != nil {
		return x.Fixed64
	}
	return 0
}

func (x *ScalarSkip) GetFloat() float32 {
	if x != nil {
		return x.Float
	}
	return 0
}

func (x *ScalarSkip) GetDouble() float64 {
	if x != nil {
		return x.Double
	}
	return 0
}

func (x *ScalarSkip) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *ScalarSkip) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

var File_gofakeit_test_scalar_proto protoreflect.FileDescriptor

var file_gofakeit_test_scalar_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x67, 0x6f, 0x66, 0x61, 0x6b, 0x65, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x67, 0x6f,
	0x66, 0x61, 0x6b, 0x65, 0x69, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x67, 0x6f, 0x66,
	0x61, 0x6b, 0x65, 0x69, 0x74, 0x2f, 0x67, 0x6f, 0x66, 0x61, 0x6b, 0x65, 0x69, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x03, 0x0a, 0x0e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x65,
	0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x66, 0x61,
	0x6b, 0x65, 0x69, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04,
	0x65, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0f, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x10,
	0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0xe6, 0x04, 0x0a, 0x10, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a,
	0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0xca, 0xe6, 0x36,
	0x06, 0x12, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x30, 0x0a,
	0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67, 0x6f,
	0x66, 0x61, 0x6b, 0x65, 0x69, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x42, 0x07, 0xca, 0xe6, 0x36, 0x03, 0x12, 0x01, 0x32, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12,
	0x1f, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09,
	0xca, 0xe6, 0x36, 0x05, 0x12, 0x03, 0x31, 0x32, 0x33, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x22, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11,
	0x42, 0x0a, 0xca, 0xe6, 0x36, 0x06, 0x12, 0x04, 0x2d, 0x34, 0x35, 0x36, 0x52, 0x06, 0x73, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x25, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x09, 0xca, 0xe6, 0x36, 0x05, 0x12, 0x03, 0x37, 0x38,
	0x39, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x22, 0x0a, 0x06, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xca, 0xe6, 0x36,
	0x06, 0x12, 0x04, 0x31, 0x30, 0x31, 0x31, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x24, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07,
	0x42, 0x0a, 0xca, 0xe6, 0x36, 0x06, 0x12, 0x04, 0x31, 0x32, 0x31, 0x33, 0x52, 0x07, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x20, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0xca, 0xe6, 0x36, 0x06, 0x12, 0x04, 0x31, 0x34, 0x31, 0x35,
	0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0b, 0xca, 0xe6, 0x36, 0x07, 0x12, 0x05, 0x2d,
	0x31, 0x36, 0x31, 0x37, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x26, 0x0a, 0x08,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0a,
	0xca, 0xe6, 0x36, 0x06, 0x12, 0x04, 0x31, 0x38, 0x31, 0x39, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x12, 0x22, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xca, 0xe6, 0x36, 0x06, 0x12, 0x04, 0x32, 0x30, 0x32, 0x31,
	0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x24, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0a, 0xca, 0xe6, 0x36, 0x06, 0x12,
	0x04, 0x32, 0x32, 0x32, 0x33, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x20,
	0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0a, 0xca,
	0xe6, 0x36, 0x06, 0x12, 0x04, 0x31, 0x2e, 0x32, 0x33, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x12, 0x23, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x0b, 0xca, 0xe6, 0x36, 0x07, 0x12, 0x05, 0x2d, 0x34, 0x2e, 0x35, 0x36, 0x52, 0x06, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xe6, 0x36, 0x08, 0x12, 0x06, 0x66, 0x6f, 0x6f,
	0x62, 0x61, 0x72, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0e, 0xca, 0xe6, 0x36, 0x0a,
	0x12, 0x08, 0x66, 0x69, 0x7a, 0x7a, 0x62, 0x75, 0x7a, 0x7a, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x22, 0x81, 0x06, 0x0a, 0x0a, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x20, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0c,
	0xca, 0xe6, 0x36, 0x08, 0x12, 0x06, 0x7b, 0x62, 0x6f, 0x6f, 0x6c, 0x7d, 0x52, 0x04, 0x62, 0x6f,
	0x6f, 0x6c, 0x12, 0x3b, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x67, 0x6f, 0x66, 0x61, 0x6b, 0x65, 0x69, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x12, 0xca, 0xe6, 0x36, 0x0e, 0x12, 0x0c, 0x7b, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x3a, 0x30, 0x2c, 0x33, 0x7d, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12,
	0x2b, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x15,
	0xca, 0xe6, 0x36, 0x11, 0x12, 0x0f, 0x7b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x2d, 0x31,
	0x30, 0x2c, 0x31, 0x30, 0x7d, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x2d, 0x0a, 0x06,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x42, 0x15, 0xca, 0xe6,
	0x36, 0x11, 0x12, 0x0f, 0x7b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x2d, 0x31, 0x30, 0x2c,
	0x31, 0x30, 0x7d, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x31, 0x0a, 0x08, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x15, 0xca,
	0xe6, 0x36, 0x11, 0x12, 0x0f, 0x7b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x2d, 0x31, 0x30,
	0x2c, 0x31, 0x30, 0x7d, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2b,
	0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13,
	0xca, 0xe6, 0x36, 0x0f, 0x12, 0x0d, 0x7b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x30, 0x2c,
	0x31, 0x30, 0x7d, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x2d, 0x0a, 0x07, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07, 0x42, 0x13, 0xca, 0xe6,
	0x36, 0x0f, 0x12, 0x0d, 0x7b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x30, 0x2c, 0x31, 0x30,
	0x7d, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x15, 0xca, 0xe6, 0x36, 0x11, 0x12,
	0x0f, 0x7b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x2d, 0x31, 0x30, 0x2c, 0x31, 0x30, 0x7d,
	0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x42, 0x15, 0xca, 0xe6, 0x36, 0x11, 0x12, 0x0f, 0x7b,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x2d, 0x31, 0x30, 0x2c, 0x31, 0x30, 0x7d, 0x52, 0x06,
	0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x10, 0x42, 0x15, 0xca, 0xe6, 0x36, 0x11, 0x12, 0x0f,
	0x7b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x2d, 0x31, 0x30, 0x2c, 0x31, 0x30, 0x7d, 0x52,
	0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x2b, 0x0a, 0x06, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x42, 0x13, 0xca, 0xe6, 0x36, 0x0f, 0x12,
	0x0d, 0x7b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x30, 0x2c, 0x31, 0x30, 0x7d, 0x52, 0x06,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2d, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x06, 0x42, 0x13, 0xca, 0xe6, 0x36, 0x0f, 0x12, 0x0d, 0x7b,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x30, 0x2c, 0x31, 0x30, 0x7d, 0x52, 0x07, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x31, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x02, 0x42, 0x1b, 0xca, 0xe6, 0x36, 0x17, 0x12, 0x15, 0x7b, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x33, 0x32, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x2d, 0x31, 0x30, 0x2c, 0x31, 0x30,
	0x7d, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x42, 0x1b, 0xca, 0xe6, 0x36, 0x17, 0x12, 0x15,
	0x7b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x2d, 0x31,
	0x30, 0x2c, 0x31, 0x30, 0x7d, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xca,
	0xe6, 0x36, 0x0e, 0x12, 0x0c, 0x7b, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x33,
	0x7d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x14, 0xca, 0xe6, 0x36, 0x10, 0x12, 0x0e,
	0x7b, 0x68, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x7d, 0x52, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0xeb, 0x04, 0x0a, 0x15, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0xca,
	0xe6, 0x36, 0x06, 0x1a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12,
	0x30, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x67, 0x6f, 0x66, 0x61, 0x6b, 0x65, 0x69, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x42, 0x07, 0xca, 0xe6, 0x36, 0x03, 0x1a, 0x01, 0x32, 0x52, 0x04, 0x65, 0x6e, 0x75,
	0x6d, 0x12, 0x1f, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x09, 0xca, 0xe6, 0x36, 0x05, 0x1a, 0x03, 0x31, 0x32, 0x33, 0x52, 0x05, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x11, 0x42, 0x0a, 0xca, 0xe6, 0x36, 0x06, 0x1a, 0x04, 0x2d, 0x34, 0x35, 0x36, 0x52, 0x06,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x25, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x09, 0xca, 0xe6, 0x36, 0x05, 0x1a, 0x03,
	0x37, 0x38, 0x39, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x22, 0x0a,
	0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xca,
	0xe6, 0x36, 0x06, 0x1a, 0x04, 0x31, 0x30, 0x31, 0x31, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x24, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x07, 0x42, 0x0a, 0xca, 0xe6, 0x36, 0x06, 0x1a, 0x04, 0x31, 0x32, 0x31, 0x33, 0x52, 0x07,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x20, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0xca, 0xe6, 0x36, 0x06, 0x1a, 0x04, 0x31, 0x34,
	0x31, 0x35, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0b, 0xca, 0xe6, 0x36, 0x07, 0x1a,
	0x05, 0x2d, 0x31, 0x36, 0x31, 0x37, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x26,
	0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x10,
	0x42, 0x0a, 0xca, 0xe6, 0x36, 0x06, 0x1a, 0x04, 0x31, 0x38, 0x31, 0x39, 0x52, 0x08, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x22, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xca, 0xe6, 0x36, 0x06, 0x1a, 0x04, 0x32, 0x30,
	0x32, 0x31, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x24, 0x0a, 0x07, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0a, 0xca, 0xe6, 0x36,
	0x06, 0x1a, 0x04, 0x32, 0x32, 0x32, 0x33, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x12, 0x20, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x0a, 0xca, 0xe6, 0x36, 0x06, 0x1a, 0x04, 0x31, 0x2e, 0x32, 0x33, 0x52, 0x05, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x0b, 0xca, 0xe6, 0x36, 0x07, 0x1a, 0x05, 0x2d, 0x34, 0x2e, 0x35, 0x36, 0x52,
	0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xe6, 0x36, 0x08, 0x1a, 0x06, 0x66,
	0x6f, 0x6f, 0x62, 0x61, 0x72, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a,
	0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0e, 0xca, 0xe6,
	0x36, 0x0a, 0x1a, 0x08, 0x66, 0x69, 0x7a, 0x7a, 0x62, 0x75, 0x7a, 0x7a, 0x52, 0x05, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x22, 0x9d, 0x04, 0x0a, 0x0a, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x53, 0x6b,
	0x69, 0x70, 0x12, 0x1a, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x06, 0xca, 0xe6, 0x36, 0x02, 0x08, 0x01, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x2f,
	0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67,
	0x6f, 0x66, 0x61, 0x6b, 0x65, 0x69, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x42, 0x06, 0xca, 0xe6, 0x36, 0x02, 0x08, 0x01, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12,
	0x1c, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06,
	0xca, 0xe6, 0x36, 0x02, 0x08, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1e, 0x0a,
	0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x42, 0x06, 0xca,
	0xe6, 0x36, 0x02, 0x08, 0x01, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x22, 0x0a,
	0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0f, 0x42,
	0x06, 0xca, 0xe6, 0x36, 0x02, 0x08, 0x01, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x12, 0x1e, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x06, 0xca, 0xe6, 0x36, 0x02, 0x08, 0x01, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x20, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x07, 0x42, 0x06, 0xca, 0xe6, 0x36, 0x02, 0x08, 0x01, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x12, 0x1c, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x06, 0xca, 0xe6, 0x36, 0x02, 0x08, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x1e, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x12, 0x42, 0x06, 0xca, 0xe6, 0x36, 0x02, 0x08, 0x01, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x10, 0x42, 0x06, 0xca, 0xe6, 0x36, 0x02, 0x08, 0x01, 0x52, 0x08, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1e, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xca, 0xe6, 0x36, 0x02, 0x08, 0x01, 0x52, 0x06, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x20, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x06, 0x42, 0x06, 0xca, 0xe6, 0x36, 0x02, 0x08, 0x01, 0x52, 0x07,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1c, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x42, 0x06, 0xca, 0xe6, 0x36, 0x02, 0x08, 0x01, 0x52, 0x05,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x42, 0x06, 0xca, 0xe6, 0x36, 0x02, 0x08, 0x01, 0x52, 0x06, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xca, 0xe6, 0x36, 0x02, 0x08, 0x01, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xca, 0xe6, 0x36, 0x02, 0x08, 0x01, 0x52, 0x05, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x2a, 0x4b, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x42, 0x45, 0x54, 0x41, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x4d, 0x41, 0x10, 0x03,
	0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72,
	0x6f, 0x64, 0x61, 0x69, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x6f, 0x66, 0x61,
	0x6b, 0x65, 0x69, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x66, 0x61, 0x6b, 0x65, 0x69,
	0x74, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gofakeit_test_scalar_proto_rawDescOnce sync.Once
	file_gofakeit_test_scalar_proto_rawDescData = file_gofakeit_test_scalar_proto_rawDesc
)

func file_gofakeit_test_scalar_proto_rawDescGZIP() []byte {
	file_gofakeit_test_scalar_proto_rawDescOnce.Do(func() {
		file_gofakeit_test_scalar_proto_rawDescData = protoimpl.X.CompressGZIP(file_gofakeit_test_scalar_proto_rawDescData)
	})
	return file_gofakeit_test_scalar_proto_rawDescData
}

var file_gofakeit_test_scalar_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_gofakeit_test_scalar_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_gofakeit_test_scalar_proto_goTypes = []interface{}{
	(Enum)(0),                     // 0: gofakeit.test.Enum
	(*ScalarDefaults)(nil),        // 1: gofakeit.test.ScalarDefaults
	(*ScalarStaticTags)(nil),      // 2: gofakeit.test.ScalarStaticTags
	(*ScalarTags)(nil),            // 3: gofakeit.test.ScalarTags
	(*ScalarStaticTemplates)(nil), // 4: gofakeit.test.ScalarStaticTemplates
	(*ScalarSkip)(nil),            // 5: gofakeit.test.ScalarSkip
}
var file_gofakeit_test_scalar_proto_depIdxs = []int32{
	0, // 0: gofakeit.test.ScalarDefaults.enum:type_name -> gofakeit.test.Enum
	0, // 1: gofakeit.test.ScalarStaticTags.enum:type_name -> gofakeit.test.Enum
	0, // 2: gofakeit.test.ScalarTags.enum:type_name -> gofakeit.test.Enum
	0, // 3: gofakeit.test.ScalarStaticTemplates.enum:type_name -> gofakeit.test.Enum
	0, // 4: gofakeit.test.ScalarSkip.enum:type_name -> gofakeit.test.Enum
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_gofakeit_test_scalar_proto_init() }
func file_gofakeit_test_scalar_proto_init() {
	if File_gofakeit_test_scalar_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gofakeit_test_scalar_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarDefaults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gofakeit_test_scalar_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarStaticTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gofakeit_test_scalar_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gofakeit_test_scalar_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarStaticTemplates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gofakeit_test_scalar_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarSkip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gofakeit_test_scalar_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gofakeit_test_scalar_proto_goTypes,
		DependencyIndexes: file_gofakeit_test_scalar_proto_depIdxs,
		EnumInfos:         file_gofakeit_test_scalar_proto_enumTypes,
		MessageInfos:      file_gofakeit_test_scalar_proto_msgTypes,
	}.Build()
	File_gofakeit_test_scalar_proto = out.File
	file_gofakeit_test_scalar_proto_rawDesc = nil
	file_gofakeit_test_scalar_proto_goTypes = nil
	file_gofakeit_test_scalar_proto_depIdxs = nil
}
